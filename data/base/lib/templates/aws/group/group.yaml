<%
require 'ipaddr'
def to_cidr(network,netmask)
  "#{network.to_s}/#{IPAddr.new(netmask.to_s).to_i.to_s(2).count('1')}"
end
clustername="#{config.cluster}"

-%>
---
Description: 'Flight Domain Template'
Parameters:
  securityGroup:
    Type: String
    Description: 'The ID of the domain Security Group'
    Default: '%securitygroup%'
<% node.config.networks.each do |netname,network| -%>
<% if network.defined -%>
  <%=netname%>SubnetId:
    Type: String
    Description: 'The ID of the domain Network Subnet for <%=netname%>'
    Default: '%<%=netname%>SubnetID%'
<% end -%>
<% end -%>
Mappings:
  RegionMap:
    eu-west-1:
      "AMI": "ami-d266dfab"
    eu-west-2:
      "AMI": "ami-c5f11ea2"
Resources:
<% group.nodes.each do |node| -%>
<% name=node.name -%>
<% node.config.networks.each do |netname,network| -%>
<% if network.defined -%>

  <%=name%><%=netname%>Interface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SourceDestCheck: false
      GroupSet:
        - !Ref securityGroup
      PrivateIpAddress: <%=network.ip %>
      SubnetId: !Ref <%=netname%>SubnetId
      Tags:
        -
          Key: 'Name'
          Value: '<%=name%>'
        -
          Key: 'alcescluster'
          Value: <%=clustername%>
<% end -%>
<% end -%>

  <%=node.name%>:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      ImageId: !FindInMap ["RegionMap", !Ref "AWS::Region", "AMI"]
      InstanceType: t2.small
      Monitoring: true
      NetworkInterfaces:
<% count=0; node.config.networks.each do |netname,network| -%>
<% if network.defined -%>
        -
          NetworkInterfaceId: !Ref <%=name%><%=netname%>Interface
          DeviceIndex: <%=count%>
<% count+=1 -%>
<% end -%>
<% end -%>

      Tags:
        -
          Key: 'Name'
          Value: '<%=name%>'
        -
          Key: 'alcescluster'
          Value: <%=clustername%>
      UserData:
        Fn::Base64:
          Fn::Join:
            - ''
            - - "#cloud-config\n"
              - "hostname: <%=name%>\n"
              - "fqdn: <%=node.config.networks.network1.hostname%>\n"
              - "runcmd:\n"
<% unless (node.config.gateway rescue false) -%>
              - "  - ip route replace default via <%= node.config.networks.network1.gateway %>\n"
<% end -%>
              - "  - curl <%= node.config.nodescripturl %> | /bin/bash -x | tee /tmp/mainscript-default-output\n"

<% if node.config.role == 'login' -%>
  <%=node.name%>publicIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  <%=node.name%>publicIpAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      NetworkInterfaceId: !Ref <%=node.name%>network1Interface
      AllocationId: !GetAtt <%=node.name%>publicIp.AllocationId
<% end -%>
<% end -%>

Outputs:
<% group.nodes.each do |node| -%>
  <%=node.name%>TAGID:
    Description: <%=node.name%>TAGID
    Value: !Ref <%=node.name%>
  <%=node.name%>TAGgroups:
    Description: <%=node.name%>TAGgroups
    Value: <%=node.genders.join(',') %>
<% if node.config.role == 'login' -%>
  <%=node.name%>TAGIP:
    Description: <%=node.name%>TAGIP
    Value: !Ref <%=node.name%>publicIp
<% end -%>
<% end -%>
