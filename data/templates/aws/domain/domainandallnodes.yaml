<%
require 'ipaddr'
def to_cidr(network,netmask)
  "#{network.to_s}/#{IPAddr.new(netmask.to_s).to_i.to_s(2).count('1')}"
end
clustername="#{config.cluster}"

-%>
---
Description: 'Flight Domain Template'
Mappings:
  RegionMap:
    eu-west-1:
      "AMI": "ami-d266dfab"
    eu-west-2:
      "AMI": "ami-c5f11ea2"
Resources:
  <%=clustername%>Network:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: <%=to_cidr(config.domainnetwork,config.domainnetmask)%>
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        -
          Key: 'Name'
          Value: '<%=clustername%>'
        -
          Key: 'alcescluster'
          Value: <%=clustername%>

  <%=clustername%>InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: <%=clustername%>Network
    Properties:
      Tags:
        -
          Key: 'Name'
          Value: '<%=clustername%>'
        -
          Key: 'alcescluster'
          Value: <%=clustername%>
  
  <%=clustername%>InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref <%=clustername%>InternetGateway
      VpcId: !Ref <%=clustername%>Network

  <%=clustername%>RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: <%=clustername%>InternetGatewayAttachment
    Properties:
      VpcId: !Ref <%=clustername%>Network
      Tags:
        -
          Key: 'Name'
          Value: '<%=clustername%>'
        -
          Key: 'alcescluster'
          Value: <%=clustername%>
  
<% config.networks.each do |networkname,network|-%>
<% if network.defined && !(network.dhcp)  -%>

  <%=clustername%><%=networkname%>Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: <%=to_cidr(network.network,network.netmask)%>
      VpcId: !Ref <%=clustername%>Network
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        -
          Key: 'Name'
          Value: '<%=clustername%>'
        -
          Key: 'alcescluster'
          Value: <%=clustername%>
<% if network.primary -%>

  <%=networkname%>SubnetRouteTableAssocation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref <%=clustername%><%=networkname%>Subnet
      RouteTableId: !Ref <%=clustername%>RouteTable
<% end -%>
<% end -%>
<% end -%>

  <%=clustername%>RouteInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: <%=clustername%>InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref <%=clustername%>RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref <%=clustername%>InternetGateway
  
  <%=clustername%>SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: <%=clustername%>
      GroupDescription: 'Primary SG for <%=clustername%>'
      VpcId: !Ref <%=clustername%>Network
      SecurityGroupIngress:
        -
          IpProtocol: '-1'
          FromPort: 0
          ToPort: 65535
          CidrIp: '<%=to_cidr(config.domainnetwork,config.domainnetmask)%>'
          Description: 'Allow all traffic for cluster VPC'
        -
          IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: '213.83.69.6/32'
          Description: 'Allow inbound SSH access'
        -
          IpProtocol: 'icmp'
          FromPort: '8'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
          Description: 'Allow ping'
      SecurityGroupEgress:
        -
          IpProtocol: '-1'
          FromPort: 0
          ToPort: 65535
          CidrIp: '0.0.0.0/0'
          Description: 'Allow outbound internet access'
      Tags:
        -
          Key: 'Name'
          Value: '<%=clustername%>'
        -
          Key: 'alcescluster'
          Value: <%=clustername%>
<% nodes.each do |node| -%>
<% name=node.name -%>
<% node.config.networks.each do |netname,network| -%>
<% if network.defined -%>

  <%=name%><%=netname%>Interface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SourceDestCheck: false
      GroupSet:
        - !Ref <%=clustername%>SecurityGroup
      PrivateIpAddress: <%=network.ip %>
      SubnetId: !Ref <%=clustername%><%=netname%>Subnet
      Tags:
        -
          Key: 'Name'
          Value: '<%=name%>'
        -
          Key: 'alcescluster'
          Value: <%=clustername%>
<% end -%>
<% end -%>

  <%=name%>:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      ImageId: !FindInMap ["RegionMap", !Ref "AWS::Region", "AMI"]
      InstanceType: t2.small
      Monitoring: true
      KeyName: aws_ireland
      NetworkInterfaces:
<% count=0; node.config.networks.each do |name,network| -%>
<% if network.defined -%>
        -
          NetworkInterfaceId: !Ref <%=name%><%=clustername%>Interface
          DeviceIndex: <%=count%>
<% count+=1 -%>
<% end -%>
<% end -%>

      Tags:
        -
          Key: 'Name'
          Value: '<%=name%>'
        -
          Key: 'alcescluster'
          Value: <%=clustername%>
      UserData:
        Fn::Base64:
          Fn::Join:
            - ''
            - - "#cloud-config\n"
              - "hostname: <%=name%>\n"
              - "fqdn: <%=node.config.networks.network1.hostname%>\n"
              - "runcmd:\n"
              - "  - curl <%= node.config.nodescripturl %> | /bin/bash -x | tee /tmp/mainscript-default-output\n"

<% #if node.config.role == 'login' -%>
  <%=node.name%>publicIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  <%=node.name%>publicIpAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      NetworkInterfaceId: !Ref <%=name%>network1Interface
      AllocationId: !GetAtt <%=name%>publicIp.AllocationId
<% #end -%>
<% end -%>

Outputs:
  networkID:
    Description: networkID
    Value: !Ref <%=clustername%>Network
  securitygroup:
    Description: securitygroup
    Value: !Ref <%=clustername%>SecurityGroup
<% config.networks.each do |networkname,network|-%>
<% if network.defined -%>
  <%=networkname%>SubnetID:
    Description: <%=networkname%>SubnetID
    Value: !Ref <%=clustername%><%=networkname%>Subnet
<% end -%>
<% end -%>
<% nodes.each do |node| -%>
  <%=node.name%>TAGID:
    Description: cloudwareNODE<%=node.name%>TAGID
    Value: !Ref <%=node.name%>
<% #if node.config.role == 'login' -%>
  <%=node.name%>TAGIP:
    Description: cloudwareNODE<%=node.name%>TAGIP
    Value: !Ref <%=node.name%>publicIp
  <%=node.name%>TAGgroups:
    Description: <%=node.name%>TAGgroups
    Value: <%=NodeattrInterface.genders_for_node(node).join(',') %>
<% #end -%>
<% end -%>

